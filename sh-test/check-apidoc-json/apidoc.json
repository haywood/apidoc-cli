{
    "name": "apidoc api",
    "description": "Host API documentation for applications providing REST APIs, facilitating the design of good resource first APIs.",
    "base_url": "http://api.apidoc.me",

    "imports": [
	{ "uri": "http://www.apidoc.me/gilt/apidoc-spec/0.8.18/service.json" }
    ],

    "enums": {
	"visibility": {
	    "description": "Controls who is able to view this version",
	    "values": [
		{ "name": "user", "description": "Only the creator can view this application" },
		{ "name": "organization", "description": "Any member of the organization can view this application" },
		{ "name": "public", "description": "Anybody, including non logged in users, can view this application" }
	    ]
	},

	"publication": {
	    "description": "A publication represents something that a user can subscribe to. An example would be subscribing to an email alert whenever a new version of an application is created.",
	    "values": [
		{ "name": "membership_requests.create", "description": "For organizations for which I am an administrator, email me whenever a user applies to join the org." },
		{ "name": "memberships.create", "description": "For organizations for which I am a member, email me whenever a user joins the org." },
		{ "name": "applications.create", "description": "For organizations for which I am a member, email me whenever an application is created." },
		{ "name": "versions.create", "description": "For applications that I watch, email me whenever a version is created." }
	    ]
	},

	"original_type": {
	    "values": [
		{ "name": "api_json", "description": "The original is in the api.json format" },
		{ "name": "swagger_json", "description": "The original in the swagger.json format" },
		{ "name": "avro_idl", "description": "The original is in Avro Idl format" }
	    ]
	}

    },

    "models": {

	"healthcheck": {
	    "fields": [
                { "name": "status", "type": "string", "example": "healthy" }
	    ]
	},

	"audit": {
	    "fields": [
		{ "name": "created_at", "type": "date-time-iso8601" },
		{ "name": "created_by", "type": "reference_guid" },
		{ "name": "updated_at", "type": "date-time-iso8601" },
		{ "name": "updated_by", "type": "reference_guid" }
	    ]
	},

	"validation": {
	    "description": "Used only to validate json files - used as a resource where http status code defines success",
	    "fields": [
                { "name": "valid", "type": "boolean", "description": "If true, the json schema is valid. If false, there is at least one validation error." },
		{ "name": "errors", "type": "[string]", "required": false, "description": "Contains any validation errors that result from parsing the json document. If empty, the document is valid." }
	    ]
	},

        "user": {
            "description": "A user is a top level person interacting with the api doc server.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this user." },
                { "name": "email", "type": "string" },
                { "name": "nickname", "type": "string", "description": "Public unique identifier for this user." },
                { "name": "name", "type": "string", "required": false }
            ]
        },

        "user_form": {
            "fields": [
                { "name": "email", "type": "string" },
                { "name": "password", "type": "string" },
                { "name": "nickname", "type": "string", "required": false, "description": "Defaults to a unique identifier based on email address" },
                { "name": "name", "type": "string", "required": false }
            ]
        },

        "user_update_form": {
            "fields": [
                { "name": "email", "type": "string" },
                { "name": "nickname", "type": "string" },
                { "name": "name", "type": "string", "required": false }
            ]
        },

        "token": {
            "description": "A token gives a user access to the API.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this token." },
                { "name": "user", "type": "user", "description": "The user to which this token belongs." },
                { "name": "masked_token", "type": "string", "description": "The masked from of the token." },
                { "name": "description", "type": "string", "description": "optional description to help the user manage the token.", "required": false },
                { "name": "audit", "type": "audit" }
            ]
        },

        "cleartext_token": {
            "description": "Separate resource used only for the few actions that require the full token.",
	    "fields": [
		{ "name": "token", "type": "string", "description": "The actual token. Guaranteed to be globally unique." }
	    ]
	},

        "token_form": {
            "fields": [
                { "name": "user_guid", "type": "uuid", "description": "The user for which we are creating the token." },
                { "name": "description", "type": "string", "required": false }
            ]
        },

        "organization": {
            "description": "An organization is used to group a set of applications together.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this organization." },
                { "name": "key", "type": "string", "description": "Used as a unique key in the URL path. Key is automatically derived from the organization name." },
                { "name": "name", "type": "string", "description": "The name of this organization." },
                { "name": "namespace", "type": "string", "description": "Global namespace for this organization.", "example": "com.gilt" },
                { "name": "visibility", "type": "visibility" },
                { "name": "domains", "type": "[domain]", "required": false }
            ]
        },

        "organization_form": {
            "fields": [
                { "name": "name", "type": "string" },
                { "name": "key", "type": "string", "required": false, "description": "Defaults to a url friendy version of the name" },
                { "name": "namespace", "type": "string", "description": "Global namespace for this organization.", "example": "com.gilt" },
                { "name": "visibility", "type": "visibility", "description": "Public organizations will be listed in apidoc directory. Organizations with visibility organization will only be visible to members of that org.", "required": false, "default": "organization" },
                { "name": "domains", "type": "[string]", "required": false, "example": "apidoc.me" }
            ]
        },

        "domain": {
            "description": "Represents a single domain name (e.g. www.apidoc.me). When a new user registers and confirms their email, we automatically associate that user with a member of the organization associated with their domain. For example, if you confirm your account with an email address of foo@gilt.com, we will automatically create a membership request on your behalf to join the organization with domain gilt.com.",
            "fields": [
                { "name": "name", "type": "string", "description": "The domain name", "example": "www.apidoc.me" }
            ]
        },

        "membership": {
            "description": "A membership represents a user in a specific role to an organization. Memberships cannot be created directly. Instead you first create a membership request, then that request is either accepted or declined.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this membership." },
                { "name": "user", "type": "user" },
                { "name": "organization", "type": "organization" },
                { "name": "role", "type": "string", "description": "The role this user plays for this organization. Typically member or admin.", "example": "member" }
            ]
        },

        "membership_request": {
            "description": "A membership request represents a user requesting to join an organization with a specific role (e.g. as a member or an admin). Membership requests can be reviewed by any current admin of the organization who can either accept or decline the request.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this membership request." },
                { "name": "user", "type": "user" },
                { "name": "organization", "type": "organization" },
                { "name": "role", "type": "string", "description": "The requested role for membership to this organization. Typically member or admin.", "example": "member" }
            ]
        },

        "application": {
            "description": "An application has a name and multiple versions of its API.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this application." },
                { "name": "organization", "type": "reference" },
                { "name": "name", "type": "string", "description": "The unique name for this application." },
                { "name": "key", "type": "string", "description": "Used as a unique key in the URL path. Key is automatically derived from the application name." },
                { "name": "visibility", "type": "visibility", "description": "Controls who is able to view this application" },
                { "name": "description", "type": "string", "required": false }
            ]
        },

        "application_form": {
            "fields": [
                { "name": "name", "type": "string" },
                { "name": "key", "type": "string", "required": false, "description": "Defaults to a key generated from the application name" },
                { "name": "description", "type": "string", "required": false },
                { "name": "visibility", "type": "visibility" }
            ]
        },

	"original": {
	    "description": "Represents the original input used to create an application version",
            "fields": [
                { "name": "type", "type": "original_type" },
                { "name": "data", "type": "string" }
	    ]
	},

        "original_form": {
            "fields": [
                { "name": "type", "type": "original_type", "required": false, "description": "If not specified, we set the type by inspecting the data" },
                { "name": "data", "type": "string" }
            ]
        },

        "version": {
            "description": "Represents a unique version of the application.",
            "fields": [
                { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this version." },
                { "name": "organization", "type": "reference" },
                { "name": "application", "type": "reference" },
                { "name": "version", "type": "string", "description": "The tag for this version. Can be anything, but if semver style version number is used, we automatically correctly sort by version number to find latest. Otherwise latest version is considered to be the most recently created.", "example": "1.0.0" },
		{ "name": "original", "type": "original", "required": false, "description": "The original uploaded file describing this version, if available" },
		{ "name": "service", "type": "com.gilt.apidoc.spec.v0.models.service", "description": "spec/service.json description of this API" }
            ]
        },

        "version_form": {
            "fields": [
		{ "name": "original_form", "type": "original_form" },
		{ "name": "visibility", "type": "visibility", "required": false, "description": "If provided, updates the visibility for all versions of this application" }
            ]
        },

        "reference": {
            "description": "Represents a reference to another model.",
            "fields": [
                { "name": "guid", "type": "uuid" },
                { "name": "key", "type": "string" }
	    ]
	},

        "reference_guid": {
            "fields": [
                { "name": "guid", "type": "uuid" }
	    ]
	},

        "code": {
            "description": "Generated source code.",
            "plural": "code",
            "fields": [
                { "name": "generator", "type": "generator" },
                { "name": "source", "type": "string", "description": "The actual source code." }
            ]
        },

        "generator": {
          "description": "An apidoc generator",
          "fields": [
            { "name": "guid", "type": "uuid", "description": "Internal unique identifier for this generator." },
            { "name": "key", "type": "string", "description": "A human readable key identifying this generator." },
            { "name": "uri", "type": "string", "description": "The uri of the generator" },
            { "name": "name", "type": "string" },
            { "name": "language", "type": "string", "required": false },
            { "name": "description", "type": "string", "required": false },
            { "name": "visibility", "type": "visibility" },
            { "name": "owner", "type": "user" },
            { "name": "enabled", "type": "boolean" }
          ]
        },

        "generator_create_form": {
          "description": "Form to create a new generator",
          "fields": [
            { "name": "key", "type": "string" },
            { "name": "uri", "type": "string" },
            { "name": "visibility", "type": "visibility" }
          ]
        },

        "generator_update_form": {
          "description": "Form to update a generator",
          "fields": [
            { "name": "visibility", "type": "visibility", "required": false, "description": "Used to change the visibility of the generator. If present on the request, the visibility is set to the specified value." },
            { "name": "enabled", "type": "boolean", "required": false, "description": "Used to enable or disable the generator for this user. If present on the request, the enabled flag is set to the specified value (true/false)." }
          ]
        },

        "generator_org_form": {
          "description": "Form to enable or disable a generator for an organization",
          "fields": [
            { "name": "enabled", "type": "boolean" }
          ]
        },

	"subscription": {
	    "description": "Represents a user that is currently subscribed to a publication",
	    "fields": [
		{ "name": "guid", "type": "uuid", "description": "Internal unique identifier for this subscription record" },
		{ "name": "organization", "type": "organization" },
		{ "name": "user", "type": "user" },
		{ "name": "publication", "type": "publication" }
	    ]
	},

	"subscription_form": {
	    "fields": [
		{ "name": "organization_key", "type": "string" },
		{ "name": "user_guid", "type": "uuid" },
		{ "name": "publication", "type": "publication" }
	    ]
	},

	"watch": {
	    "description": "Users can watch individual applications which enables features like receiving an email notification when there is a new version of an application.",
	    "fields": [
		{ "name": "guid", "type": "uuid", "description": "Internal unique identifier for this watch" },
		{ "name": "user", "type": "user" },
		{ "name": "organization", "type": "organization" },
		{ "name": "application", "type": "application" }
	    ]
	},

	"watch_form": {
	    "fields": [
		{ "name": "user_guid", "type": "uuid" },
		{ "name": "organization_key", "type": "string" },
		{ "name": "application_key", "type": "string" }
	    ]
	},

	"email_verification_confirmation_form": {
	    "description": "Data used to confirm an email address. The token is an internal unique identifier used to lookup the specific email address and user account for which we sent an email verification email.",
	    "fields": [
		{ "name": "token", "type": "string" }
	    ]
	},

	"password_reset_request": {
	    "description": "Create a password reset request - e.g. an email containing a one time URL to change a password",
	    "fields": [
		{ "name": "email", "type": "string", "description": "The email address for which we generate the password reset." }
	    ]
	},

	"password_reset": {
	    "description": "Allows a user to change their password with authentication from a token.",
	    "fields": [
		{ "name": "token", "type": "string", "description": "Unique one time use token to change a password" },
		{ "name": "password", "type": "string" }
	    ]
	},

	"password_reset_success": {
	    "description": "On a successful password reset, return some metadata about the user modified.",
	    "fields": [
		{ "name": "user_guid", "type": "uuid" }
	    ]
	},

        "error": {
            "fields": [
                { "name": "code", "type": "string", "description": "Machine readable code for this specific error message" },
                { "name": "message", "type": "string", "description": "Description of the error" }
            ]
        }

    },

    "resources": {

	"healthcheck": {
	    "path": "/_internal_/healthcheck",
            "operations": [
                {
                    "method": "GET",
                    "responses": {
                        "200": { "type": "healthcheck" }
                    }
                }
	    ]
	},

	"validation": {
	    "description": "Public resource that can accept JSON input and returns a validation object describing any validation errors.",
	    "operations": [
		{
		    "method": "POST",
		    "body": { "type": "string" },
                    "responses": {
                        "200": { "type": "validation" }
                    }
		}
	    ]
	},

	"user": {
            "operations": [
                {
                    "method": "GET",
                    "description": "Search for a specific user. You must specify at least 1 parameter - either a guid, email or token - and will receive back either 0 or 1 users.",
                    "parameters": [
                        { "name": "guid", "type": "uuid", "description": "Find user with this guid. Exact match", "required": false },
                        { "name": "email", "type": "string", "description": "Find user with this email address. Case in-sensitive. Exact match", "required": false },
                        { "name": "token", "type": "string", "description": "Find the user with this API token. Exact match", "required": false }
                    ],
                    "responses": {
                        "200": { "type": "[user]" }
                    }
                },

                {
                    "method": "GET",
                    "description": "Returns information about the user with this guid.",
                    "path": "/:guid",
                    "responses": {
                        "200": { "type": "user" }
                    }
                },

		{
		    "method": "POST",
		    "path": "/authenticate",
		    "description": "Used to authenticate a user with an email address and password. Successful authentication returns an instance of the user model. Failed authorizations of any kind are returned as a generic error with code user_authorization_failed.",
		    "parameters": [
			{ "name": "email", "type": "string" },
			{ "name": "password", "type": "string" }
		    ],
                    "responses": {
                        "200": { "type": "user" },
                        "409": { "type": "[error]" }
		    }
		},

                {
                    "method": "POST",
                    "description": "Create a new user.",
                    "body": { "type": "user_form" },
                    "responses": {
                        "200": { "type": "user" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "PUT",
                    "path": "/:guid",
                    "description": "Updates information about the user with the specified guid.",
		    "body": { "type": "user_update_form" },
                    "responses": {
                        "200": { "type": "user" },
                        "409": { "type": "[error]" }
                    }
                }
            ]
        },

	"token": {
	    "operations": [
		{
		    "method": "GET",
		    "path": "/users/:user_guid",
		    "parameters": [
			{ "name": "user_guid", "type": "uuid" },
			{ "name": "guid", "type": "uuid", "required": false },
                        { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
		    ],
                    "responses": {
                        "200": { "type": "[token]" }
                    }
		},

		{
		    "method": "GET",
		    "description": "Used to fetch the clear text token.",
		    "path": "/:guid/cleartext",
                    "responses": {
                        "200": { "type": "cleartext_token" }
                    }
		},

		{
		    "method": "POST",
		    "description": "Create a new API token for this user",
		    "body": { "type": "token_form" },
                    "responses": {
                        "201": { "type": "token" },
                        "409": { "type": "[error]" }
                    }
		},

		{
		    "method": "DELETE",
		    "path": "/:guid"
		}
	    ]
	},

        "organization": {
            "operations": [
                {
                    "method": "GET",
                    "description": "Search all organizations. Results are always paginated.",
                    "parameters": [
                        { "name": "guid", "type": "uuid", "required": false, "description": "Finds the organization with this guid, if any" },
			{ "name": "user_guid", "type": "uuid", "required": false, "description": "If specified, restricts to organizations that this user is specifically a member of (e.g. will exclude public organizations with which the user does not have a direct membership)." },

                        { "name": "key", "type": "string", "description": "Find organizations with this key. Case in-sensitive. Exact match", "required": false },
                        { "name": "name", "type": "string", "description": "Find organizations with this name. Case in-sensitive. Exact match", "required": false },
                        { "name": "namespace", "type": "string", "description": "Find organizations with this namespace. Case in-sensitive. Exact match", "required": false },
                        { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[organization]" }
                    }
                },

                {
                    "method": "GET",
                    "path": "/:key",
                    "description": "Returns the organization with this key.",
                    "responses": {
                        "200": { "type": "organization" }
                    }
                },

                {
                    "method": "POST",
                    "description": "Create a new organization.",
                    "body": { "type": "organization_form" },
                    "responses": {
                        "200": { "type": "organization" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "PUT",
		    "path": "/:key",
                    "description": "Update an organization.",
                    "body": { "type": "organization_form" },
                    "responses": {
                        "200": { "type": "organization" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "DELETE",
                    "path": "/:key",
                    "description": "Deletes an organization and all of its associated applications."
                }
            ]
        },

	"domain": {
            "path": "/domains/:orgKey",
	    "operations": [
		{
		    "method": "POST",
		    "description": "Add a domain to this organization",
		    "body": { "type": "domain" },
                    "responses": {
                        "200": { "type": "domain" },
                        "409": { "type": "[error]" }
                    }
                },

		{
		    "method": "DELETE",
		    "description": "Remove this domain from this organization",
		    "path": "/:name"
                }
	    ]
	},

        "membership": {
            "operations": [
                {
                    "method": "GET",
                    "description": "Search all memberships. Results are always paginated.",
                    "parameters": [
                        { "name": "org_guid", "type": "uuid", "required": false },
                        { "name": "org_key", "type": "string", "required": false },
                        { "name": "user_guid", "type": "uuid", "required": false },
                        { "name": "role", "type": "string", "required": false },
                        { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[membership]" }
                    }
                },

                {
                    "method": "GET",
                    "path": "/:guid",
		    "responses": {
			"200": { "type": "membership" }
		    }
                },

                {
                    "method": "DELETE",
                    "path": "/:guid"
                }
            ]
        },

        "membership_request": {
            "operations": [
                {
                    "method": "GET",
                    "description": "Search all membership requests. Results are always paginated.",
                    "parameters": [
                        { "name": "org_guid", "type": "uuid", "required": false },
                        { "name": "org_key", "type": "string", "required": false },
                        { "name": "user_guid", "type": "uuid", "required": false },
                        { "name": "role", "type": "string", "required": false },
                        { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[membership_request]" }
                    }
                },

                {
                    "method": "POST",
                    "description": "Create a membership request",
                    "parameters": [
                        { "name": "org_guid", "type": "uuid" },
                        { "name": "user_guid", "type": "uuid" },
                        { "name": "role", "type": "string" }
                    ],
                    "responses": {
                        "200": { "type": "membership_request" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "POST",
                    "path": "/:guid/accept",
                    "description": "Accepts this membership request. User will become a member of the specified organization.",
                    "responses": {
                        "204": { "type": "unit" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "POST",
                    "path": "/:guid/decline",
                    "description": "Declines this membership request. User will NOT become a member of the specified organization.",
                    "responses": {
                        "204": { "type": "unit" },
                        "409": { "type": "[error]" }
                    }

                }

            ]
        },

        "application": {
            "path": "/:orgKey",
            "operations": [
                {
                    "method": "GET",
                    "description": "Search all applications. Results are always paginated.",
                    "parameters": [
                        { "name": "orgKey", "type": "string", "description": "The organization key for which to search applications" },
                        { "name": "name", "type": "string", "required": false, "description": "The name of an application. Case in-sensitive. Exact match", "required": false },
                        { "name": "key", "type": "string", "required": false, "description": "The key of an application. Case in-sensitive. Exact match", "required": false },
                        { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "maximum": 100 },
                        { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[application]" }
                    }
                },

                {
                    "method": "POST",
                    "description": "Create an application.",
		    "body": { "type": "application_form" },
                    "responses": {
                        "200": { "type": "application" },
			"409": { "type": "[error]" }
                    }
                },

                {
                    "method": "PUT",
                    "description": "Updates an application.",
                    "path": "/:applicationKey",
		    "body": { "type": "application_form" },
                    "responses": {
                        "200": { "type": "application" },
			"409": { "type": "[error]" }
                    }
                },

                {
                    "method": "DELETE",
                    "description": "Deletes a specific application and its associated versions.",
                    "path": "/:applicationKey"
                }

            ]
        },

        "code": {
	    "path": "/:orgKey/:applicationKey/:version/:generatorKey",

            "operations": [
                {
                    "method": "GET",
                    "description": "Generate code for a specific version of an application.",
                    "parameters": [
                        { "name": "orgKey", "type": "string", "description": "The organization key for which to generate code" },
                        { "name": "applicationKey", "type": "string", "description": "The application key for which to generate code" },
                        { "name": "version", "type": "string", "description": "The version of this application. Can be 'latest'" },
                        { "name": "generatorKey", "type": "string", "description": "The key of the generator to invoke" }
		    ],
                    "responses": {
                        "200": { "type": "code" },
                        "409": { "type": "[error]", "description": "If the target, version, and/or generator are invalid." }
                    }
                }
            ]
        },

        "version": {
            "path": "/:orgKey",

            "operations": [
                {
                    "method": "GET",
		    "path": "/:applicationKey",
                    "description": "Search all versions of this application. Results are always paginated.",
                    "parameters": [
                        { "name": "orgKey", "type": "string", "description": "The organization key for which to search versions" },
                        { "name": "applicationKey", "type": "string", "description": "The application key for which to search versions" },
                        { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "maximum": 100 },
                        { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[version]" }
                    }
                },

                {
                    "method": "GET",
                    "description": "Retrieve a specific version of an application.",
		    "path": "/:applicationKey/:version",
                    "responses": {
                        "200": { "type": "version" }
                    }
                },

                {
                    "method": "POST",
		    "path": "/:version",
                    "description": "Create a new version for an application",
		    "body": { "type": "version_form" },
                    "responses": {
                        "200": { "type": "version" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "PUT",
                    "description": "Upsert a version of an application",
                    "path": "/:applicationKey/:version",
		    "body": { "type": "version_form" },
                    "responses": {
                        "200": { "type": "version" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "DELETE",
                    "description": "Deletes a specific version.",
                    "path": "/:applicationKey/:version"
                }

            ]
        },

        "generator": {
          "operations": [
            {
              "method": "GET",
              "description": "List all generators visible by this user",
              "parameters": [
                  { "name": "guid", "type": "uuid", "required": false, "description": "Filter to generator with this uuid" },
                  { "name": "key", "type": "string", "required": false, "description": "Filter to generator with this key" },
                  { "name": "limit", "type": "long", "default": 100, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                  { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
              ],
              "responses": {
                "200": { "type": "[generator]" }
              }
            },

            {
              "method": "GET",
              "path": "/:key",
              "responses": {
                "200": { "type": "generator" }
              }
            },

            {
              "method": "POST",
              "body": { "type": "generator_create_form" },
              "responses": {
                "200": { "type": "generator" },
                "409": { "type": "[error]" }
              }
            },

            {
              "method": "PUT",
              "path": "/:key",
              "body": { "type": "generator_update_form" },
              "responses": {
                "200": { "type": "generator" },
                "409": { "type": "[error]" }
              }
            },

            {
              "method": "DELETE",
              "path": "/:key",
              "description": "Deletes a generator."
            }
          ]
        },

	"subscription": {
	    "operations": [
                {
                    "method": "GET",
                    "description": "Search subscriptions. Always paginated.",
                    "parameters": [
                        { "name": "guid", "type": "uuid", "description": "Find the subscription with this guid.", "required": false },
                        { "name": "organization_key", "type": "string", "description": "Find subscriptions for this organization.", "required": false },
                        { "name": "user_guid", "type": "uuid", "description": "Find subscriptions for this user.", "required": false },
                        { "name": "publication", "type": "publication", "description": "Find subscriptions for this publication.", "required": false },
                        { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[subscription]" }
                    }
                },

                {
                    "method": "GET",
                    "description": "Returns information about a specific subscription.",
                    "path": "/:guid",
                    "responses": {
                        "200": { "type": "subscription" }
                    }
                },

                {
                    "method": "POST",
                    "description": "Create a new subscription.",
                    "body": { "type": "subscription_form" },
                    "responses": {
                        "201": { "type": "subscription" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "DELETE",
		    "path": "/:guid"
                }
            ]
        },

	"watch": {
	    "operations": [
                {
                    "method": "GET",
                    "description": "Search watches. Always paginated.",
                    "parameters": [
                        { "name": "guid", "type": "uuid", "description": "Find the watch with this guid.", "required": false },
                        { "name": "user_guid", "type": "uuid", "description": "Find watches for this user.", "required": false },
                        { "name": "organization_key", "type": "string", "description": "Find watches for this organization.", "required": false },
                        { "name": "application_key", "type": "string", "description": "Find watches for this application.", "required": false },
                        { "name": "limit", "type": "long", "default": 25, "description": "The number of records to return", "minimum": 0, "maximum": 100 },
                        { "name": "offset", "type": "long", "default": 0, "description": "Used to paginate. First page of results is 0.", "minimum": 0 }
                    ],
                    "responses": {
                        "200": { "type": "[watch]" }
                    }
                },

                {
                    "method": "GET",
                    "description": "Returns information about a specific watch.",
                    "path": "/:guid",
                    "responses": {
                        "200": { "type": "watch" }
                    }
                },

                {
                    "method": "GET",
                    "description": "Quick check if a user is watching a specific application.",
                    "path": "/check",
		    "parameters": [
                        { "name": "user_guid", "type": "uuid", "description": "The user for which we are checking. API returns false if the user guid is not provided", "required": false },
                        { "name": "organization_key", "type": "string" },
                        { "name": "application_key", "type": "string" }
		    ],
                    "responses": {
                        "200": { "type": "boolean" }
                    }
                },

                {
                    "method": "POST",
                    "description": "Create a new watch.",
                    "body": { "type": "watch_form" },
                    "responses": {
                        "201": { "type": "watch" },
                        "409": { "type": "[error]" }
                    }
                },

                {
                    "method": "DELETE",
		    "path": "/:guid"
                }
            ]
        },

	"email_verification_confirmation_form": {
	    "path": "/email_verification_confirmations",
	    "operations": [
                {
                    "method": "POST",
                    "description": "Validate an email address using a token.",
                    "body": { "type": "email_verification_confirmation_form" },
                    "responses": {
                        "204": { "type": "unit" },
                        "409": { "type": "[error]" }
                    }
                }
	    ]
	},

	"password_reset_request": {
	    "operations": [
                {
                    "method": "POST",
                    "description": "Create a new password reset. This will send the user an email with a link to reset their password.",
		    "body": { "type": "password_reset_request" },
                    "responses": {
                        "204": { "type": "unit" },
                        "409": { "type": "[error]" }
                    }
                }
	    ]
	},

	"password_reset": {
	    "operations": [
                {
                    "method": "POST",
                    "description": "Change the password for this token. If the token is invalid, has been used, or otherwise no longer can be applied, errors will be returned as 409s. A 204 represents that the user has successfully changed their password.",
		    "body": { "type": "password_reset" },
                    "responses": {
                        "200": { "type": "password_reset_success" },
                        "409": { "type": "[error]" }
                    }
                }

	    ]
	}

    }

}
